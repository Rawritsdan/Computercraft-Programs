local function split(pString, pPattern)
   local Table = {}  -- NOTE: use {n = 0} in Lua-5.0
   local fpat = "(.-)" .. pPattern
   local last_end = 1
   local s, e, cap = pString:find(fpat, 1)
   while s do
          if s ~= 1 or cap ~= "" then
         table.insert(Table,cap)
          end
          last_end = e+1
          s, e, cap = pString:find(fpat, last_end)
   end
   if last_end <= #pString then
          cap = pString:sub(last_end)
          table.insert(Table, cap)
   end
   return Table
end

local function printTbl(tbl)
   for i,j in pairs(tbl) do
      print(i..":"..j)
   end
end

local function getPeripherals(sType)
  local P = {}
  for _,name in ipairs(peripheral.getNames()) do
        if peripheral.getType(name) == sType then
          P[#P + 1] = peripheral.wrap(name)
        end
  end
  return P
end

local function RequestMessage()
	print ">Sending Device Request..."
	print (">Sent: " , Request)
	rednet.broadcast(Request)
	print ">Awaiting Response..."
	ID,Message,Distance = rednet.receive(5)
	if Message == nil then
		print ">No Response From Device..."
		FeedbackText.setText("No Response From Device...")
		sleep(2)
		FeedbackText.setText("Ready For Commands...")
	else
		print "---------------------------------------------------"
		print "Message Received!"
		print ("From: ",ID)
		print ("Response: ",Message)
		print "---------------------------------------------------"
	end
end 

local function UnknownCommand()
	print ">Unknown Command"
	FeedbackText.setText("Unknown Command")
	sleep(1)
	FeedbackText.setText("Ready For Commands...")
end

local function DrawHUD() -- Don't localise these
	GlassServer.clear()
	ConnectedStatus = GlassServer.addBox(5,5,10,10,0x00FF00,1)
	ConnectedStatus.setZIndex(1)
	HUDMain = GlassServer.addBox(4,4,12,12,0x000000,0.5),GlassServer.addBox(18,5,137,11,0x000000,0.5)
	EnergyMain = GlassServer.addBox(4,18,232,22,0x000000,0)
	LiquidMain = GlassServer.addBox(4,42,232,42,0x000000,0)
	
	LiquidWaterText = GlassServer.addText(6,44,"",0xFFFFFF)
	LiquidWaterText.setZIndex(1)
	LiquidLavaText = GlassServer.addText(6,54,"",0xFFFFFF)
	LiquidLavaText.setZIndex(1)
	LiquidOilText = GlassServer.addText(6,64,"",0xFFFFFF)
	LiquidOilText.setZIndex(1)
	LiquidFuelText = GlassServer.addText(6,74,"",0xFFFFFF)
	LiquidFuelText.setZIndex(1)
	FeedbackText = GlassServer.addText(20,7,"Ready For Commands...",0xFFFFFF)
	FeedbackText.setZIndex(1)
	EnergyEUText = GlassServer.addText(6,20,"",0xFFFFFF)
	EnergyEUText.setZIndex(1)
	EnergyMJText = GlassServer.addText(6,30,"",0xFFFFFF)
	EnergyMJText.setZIndex(1)
end

rednet.open("top")
GlassServer = peripheral.wrap("bottom")
term.clear()
term.setCursorPos(1,1)
print [[Server Started...
Awaiting Commands...
---------------------------------------------------]]
-- Could have peripheral list?
DrawHUD()
local HUDDisabled = false

while true do
	local Event, Command = os.pullEvent("chat_command")
	print (">Command Received: ",Command)
	local Command=split(Command,'\ ') 
	if Command[1] == "debug" then -- Debugging area
		if Command[2] == "red" then
			FeedbackText.setText("Changing")
			ConnectedStatus.setColor(0xFF0000)
			sleep(0.5)
			FeedbackText.setText("Ready For Commands...")
		elseif Command[2] == "green" then
			FeedbackText.setText("Changing")
			ConnectedStatus.setColor(0x00FF00)
			sleep(0.5)
			FeedbackText.setText("Ready For Commands...")
		elseif Command[2] == "reboot" then
			os.reboot()
		elseif Command[2] == "users" then
			local Users = GlassServer.getUsers()
			print ("Connected Users:")
			printTbl(Users)
		elseif Command[2] == "unlink" then
			GlassServer.resetGuid()
		elseif Command[2] == "peripherals" then
			print "Peripherals Attatched:"
			local PeripheralNames = peripheral.getNames()
			printTbl(PeripheralNames)
			print "---------------------------------------------------"
		elseif Command[2] == "pim" then
			local Request = "Req:pim"
			RequestMessage()
		end
	elseif Command[1] == "screen" then
		local P = getPeripherals("monitor")
		if Command[2] == "send" then
			local Text = ""
			for i=3,#Command do
				print (Command[i]) -- Debug
				Text = Text .. Command[i] .. " "
			end
			for i=1, #P do
				P[i].clear()
				P[i].setTextScale(1.5)
				P[i].setCursorPos(1,1)
				P[i].write(Text) -- Debug
			end 
			print ">Wrote To Screen:"
			print (Text)
			print "---------------------------------------------------"
		elseif Command[2] == "clear" then
			for i=1, #P do
				P[i].clear()
				P[i].setCursorPos(1,1)
			end
			print ">Cleared Screen"
		else
			UnknownCommand()
		end
	elseif Command[1] == "energy" then
		if Command[2] == "show" then
			Request = "Req:Energy" -- Don't make local! Or Requests become screwed!
			RequestMessage()
			if Message ~= nil then
				Message=split(Message,'\:')
				EnergyEU = "Amount Of EU: " .. Message[3] .. " / " .. Message[4]
				EnergyMJ = "Amount Of MJ: " .. Message[5] .. " / " .. Message[6]
				EnergyEUText.setText(EnergyEU)
				EnergyMJText.setText(EnergyMJ)
				EnergyMain.setOpacity(0.5)
			end
		elseif Command[2] == "hide" then
			EnergyEUText.setText("")
			EnergyMJText.setText("")
			EnergyMain.setOpacity(0)
		else
			 UnknownCommand()
		end
	elseif Command[1] == "lights" then
		Request = "Req:Lights:" .. Command[2]
		RequestMessage()
	elseif Command[1] == "speak" then
		local P = getPeripherals("speaker")
		local Text = ""
		for i=2,#Command do
			Text = Text .. Command[i] .. " "
		end
		for i=1,#P do
			P[i].speak(Text)
		end
	elseif Command[1] == "inventory" then
		
	elseif Command[1] == "liquid" then
		if Command[2] == "show" then
			Request = "Req:Liquids"
			RequestMessage()
			if Message ~= nil then
				Message=split(Message,'\:')
				LiquidWater = "Amount Of Water: " .. Message[3] .. " / " .. Message[4]
				LiquidLava = "Amount Of Lava: " .. Message[5] .. " / " .. Message[6]
				LiquidOil = "Amount Of Oil: " .. Message[7] .. " / " .. Message[8]
				LiquidFuel = "Amount Of Fuel: " .. Message[9] .. " / " .. Message[10]
			else -- Debug display
				LiquidWater = "Amount Of Water: 10085430"
				LiquidLava = "Amount Of Lava: 994557473"
				LiquidOil = "Amount Of Oil: 747357"
				LiquidFuel = "Amount Of Fuel: 85678464"
			end
		elseif Command[2] == "hide" then
			LiquidWaterText.setText("")
			LiquidLavaText.setText("")
			LiquidOilText.setText("")
			LiquidFuelText.setText("")
			LiquidMain.setOpacity(0)
		end
	elseif Command[1] == "ping" then
		Request = "Req:Ping" -- Ping must be built into receiving program
		-- handle multiple simultaneous rednet messages, or Ping individually and group into a table.
			print ">Pinging"
			--local PingTable = {}
			for i=1,25 do -- Need to find out how many computers are alive
				rednet.send(i,Request)
				PingID,Response = rednet.receive(0.2)
				if Response ~= nil then
					local Response=split(Response,'\:')
					print (PingID,":",Response[3]) -- Write to log too?
					--table.insert(PingTable,Response[3])
				else
					print (i,":No Response")
				end
			end
			print ">Done"
			--printTbl(PingTable)
	elseif Command[1] == "chat" then
		local P = getPeripherals("chat")
		local Text = ""
		for i=2,#Command do
			Text = Text .. Command[i] .. " "
		end
		for i=1,#P do
			P[i].say(Text)
		end
	elseif Command[1] == "tannoy" then
		local Text = ""
		for i=2,#Command do
			Text = Text .. Command[i] .. ":"
		end
		Request = "Req:Tannoy:" .. Text
		RequestMessage()
	else
		UnknownCommand()
	end
end